Network Working Group                             R-type-2014-bideau_s
Request for Comments: nnnn                               December 2011
Category: Informational


                  Network Game Protocol (NGP) For R-Type

Status of This Memo

   This document specifies the Protocol for a Network Game R-Type.
   It describe how is set the binary communication between a
   R-Type Client and R-Type Server, using Transmission Control
   Protocol (TCP) and User Datagram Protocol (UDP).
   Distribution of this memo is unlimited.
   This memo provides information for the Internet community. This
   memo does not specify an Internet standard of any kind.
   Distribution of this memo is unlimited.

Conventions Used in This Document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

Copyright Notice

   Copyright (c) R-Type-2014-bideau_s (2011). All rights reserved.

Contact

   To contact the RFC Editor send an email message to:

         "babel2014@googlegroups.com".



R-type-2014-bideau_s        Informational                        [Page 1]

RFC 133742                  Network Game Protocol           December 2011


Table of Contents

   1. Introduction ....................................................*
   2. Transfert Description ...........................................*
      2.1 TCP .........................................................*
      2.2 UDP .........................................................*
   3. Data Unit Format ................................................2
      3.1 Header ......................................................2
      3.2 Data ........................................................2
   4. Game Group ......................................................2
      4.1 GetGame .....................................................2
      4.2 GetLvl ......................................................2
      4.3 Create ......................................................2
      4.4 Join ........................................................2
      4.5 Quit ........................................................2
      4.6 EndGame .....................................................2
      4.7 Start .......................................................2
   5. GameDetails Group ...............................................2
      5.1 PlayerLogin .................................................2
      5.2 Score .......................................................2
      5.3 GetMap ......................................................* <-
      5.4 PlayerLife ..................................................2
   6. Movement Group ..................................................2
      6.1 Move ........................................................2
      6.2 UpdatePlayer ................................................2
      6.3 UpdateEnemy .................................................2
      6.4 UpdateBullet ................................................2
      6.5 NewBullet ...................................................2
   7. Lobby Group .....................................................*
      7.1 Chat ..... ..................................................2
   8. Message Exchange ................................................2
      8.1 TCP .........................................................2
      8.2 UDP .........................................................2
   9. References ......................................................*

1.  Introduction

//todo introduction

2.  Transfert Description

//todo transfert description

3.  Data Unit Format

   The Data Unit Format contains two fields: a 8 bytes header that describes
   the total length of the data, and the data unit.

        +--------+-------------------+
        | header |      data	     |
        +--------+-------------------+
        | 8 bytes|  size determined  |
        | 	 |     in header     |
        +--------+-------------------+

3.1.  Header

 0        1        2        3        4        5        6        7        8
 +--------+--------+--------+--------+--------+--------+--------+--------+
 |      magic      |      data       |      group      |   instruction   |
 |      number     |      size       |      type       |       type      |
 +--------+--------+--------+--------+--------+--------+--------+--------+

   Magic Number (2 bytes) :
   A magic number that MUST worth 97463 to check if the packet is an r-type
   packet. If the magic number is wrong, the packet is ignored.

   Data Size (2 bytes) :
   Size of the data unit.

   Group Type (2 bytes) :
   The type of Group that the packet is.  The content of this section MUST
   be one of the four following :

   GAMEGROUP    :   0
   GAMEDETAILS	:   1
   MOVEMENTGROUP:   2
   LOBBY	:   3

   Instruction Type (2 bytes) :
   The type of Instruction from the previous group that the packet is.
   Differs according to group.


3.2.  Data

    Data is an array of bytes.
    Data MUST be formatting as the following :
    There MUST be no separator between 2 informations.
    String Type MUST be composed by : 2 bytes for the size and raw text,
    without '\0' in the end.
    For instance if the data contains an id = 42 (2 bytes) and a
    login = "foobar" the data will have a size of 10 and will look like:


    0     1     2     3     4     5     6     7     8     9     10
    +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
    |    id =   |  size =   |              raw text =           |
    |-----------|-----------|-----------------------------------|
    |     42    |     6     | 'f' | 'o' | 'o' | 'b' | 'a' | 'r' |
    +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

    Because the size of a string type changes, for now on, the packet's
    diagram will no longer represent the data type string. A Data
    containing a string named login will be represented as below:
    ~ login ~


4.  Game Group (0)

    The game group contains instruction to create delete and join
    and quit a game. It also send to Client the list of game in
    progress. TCP is used for this group. The instruction Type MUST be
    one of the following :

    GETGAME    :   0
    GETLVL     :   1
    CREATE     :   2
    JOIN       :   3
    QUIT       :   4
    ENDGAME    :   5
    START      :   6

4.1 GetGame Instruction (0)

    4.1.1 Client to Server

    When the client wants to know the list of game in progress (being
    played but also on hold) he has to request the server by sending a
    packet containing a simple header and the GAME group instruction
    GETGAME. The data unit SHOULD be empty. If not, the data MUST
    be ignored by the Server.

    For this instruction, the header will always look the same:

 0        1        2        3        4        5        6        7        8
 +--------+--------+--------+--------+--------+--------+--------+--------+
 |      magic      |     size =      |     group =     |   instruction = |
 |      number     |        0        |      GAME       |      GETGAME    |
 +--------+--------+--------+--------+--------+--------+--------+--------+

   And because the packet only contain a header (no data unit), the data
   size SHOULD always be zero.

   4.1.2 Server to Client

   When the Server responds to the Client, it will sends the almost exact header:
   Only the size changes. He also sends a data.


   If the Server has 0 game in progress, the data SHOULD be empty.
   Otherwise, the data contains datagrames.
   A datagame MUST contains :

   id_game	2 bytes		Each game has an unique id
   login	string		Login of the user who created this game
   game_name	string		Name of the game
   lvl		string		Level of the game
   player_max	1 byte		Max number of player (MUST be from 1 to 4)
   observer	1 byte		MUST be set to 1 if the game accept client that
   		  		dont play the game but can watch it as
				an observer. Else, MUST be set to 0.
   nb_player	1 byte		Number of player that already joined the game

    0     1     2    (3 strings X bytes)        N    N+1   N+2   N+3
    +-----+-----+                               +-----+-----+-----+
    |    id     |                               | pla-| obs-| nb  |
    |           |  ~ login ~ game_name ~ lvl ~  | yer | erv-| pla-|
    |   game    |                               | max | er  | yer |
    +-----+-----+                               +-----+-----+-----+

    See (Section 3.2. Data) For more information on string type.
    with N = 2 + X

4.2 GetLvl Instruction (1)

    4.2.1 Client to Server

    When a Client wants to know the level available on the server he SHOULD send
    a GETLEVEL instruction from the GAME group. The Packet contains MUST a
    simple header without data and will always look the same.

 0        1        2        3        4        5        6        7        8
 +--------+--------+--------+--------+--------+--------+--------+--------+
 |      magic      |     size =      |     group =     |   instruction = |
 |      number     |        0        |      GAME       |      GETLVL     |
 +--------+--------+--------+--------+--------+--------+--------+--------+

    4.2.1 Server to Client (tcp)

    When the Server responds to the client, he MUST sends one header and a list
    of strings, each one containing the lvl name. The header MUST be the same
    as the one sent by the client, exept for the size of the data.

4.3 Create Instruction (2)

    4.3.1 Client -> Server

    When a Client wants to create a game, he SHOULD send a Create Game Packet.
    This instruction MUST contains a Header and a Data. The Data MUST contains:

    login	string	      Username the Client chose for the game
    game_name	string	      Name of the game created by the client
    lvl		string	      Game Level (MUST be one of the level sent by
    			      the server after a GetLvl instruction)
			      See (Section 4.2 GetLvl Instruction)
    player_max	1 byte	      Number of players accepted for the game
    		  	      MUST be between 1 and 4.
    observer 	1 byte	      MUST be set to 1 if the client accept clients that
    		  	      will not play the game but be able to watch it
			      as an observer. Else MUST be set to 0.

    4.3.2 Server -> Client

    The Servers MUST responds to the client with a header and a data.
    The data MUST contains :

    request_status	1 byte	Set to 0 if the request the client made
    			  	failed. On success is set to different
				than 0.
    The data CAN contains after the reques_status:

    details (OPTIONAL)		string	details on why the request
    				failed.

    Events where the Client's request fails:

    Username already exist.
    Client has already created a game that is not finished.
    Name of the game already exist
    Game Lvl not supported / unknown by server
    Number of player accepted for the game is > 4
    Number of player accepted for the game is < 1
    Unknown format

    For instance, when a Client send a Create instruction and the
    instruction don't fail, the Server SHOULD sends:

    0      1      2      3      4      5      6      7      8	   9
    +------+------+------+------+------+------+------+------+------+
    |                        header                         | data |
    |-------------|-------------|----------------------------------|
    |    magic    |    size     |    group    |  instruct   |status|
    |-------------|-------------|----------------------------------|
    |   97463     |      1      |    GAME(0)  |  CREATE(2)  | OK(1)|
    +------+------+------+------+------+------+------+------+------+

4.4 Join Instruction (3)

    4.4.1 Client -> Server

    To Join a game the client SHOULD send a Join Instruction. This
    instruction MUST contains:

    login	string		Username the client chose for himself
    				for the game.
    id_game	2 bytes		The id of the game. MUST be an id
    		  		received from the response from the
				Server to the GetGame Instruction.
    observer	1 byte		MUST be set to 1 if the client wants to play
    		  		the game, MUST be 0 if he only want to watch

    4.4.2 Server -> Client

    The Servers MUST responds to the client with a header and a data.
    The data contains :

    request_status	1 byte	Set to 0 if the request the client made
    			  	failed. On success is set to different
				than 0.
    The data CAN contains after :
    details (OPTIONAL)	string	details on why the request
    				failed.

    Events where the Client's request fails:

    Username already exist.
    Unknown Id Game
    Unknown format
    This Game don't accept observer.
    This Game is full.

4.5 Quit Instruction (4)

    This instruction only exist Client to Server.
    When a user properly quit, he MUST send a Quit instruction.
    This instruction MUST contains a Header but SHOULD NOT contain
    a data.

4.6 EndGame Instruction (5)

    This instruction only exist Server to Client.
    When The Lvl is finished or when all Players are dead, the
    Server MUST send a EndGame instruction.
    This instruction MUST contains a Header but SHOULD NOT contain
    a data.

4.7 Start Instruction (6)

    4.7.1 Client to Server

    To start the game the client MUST send a Start instruction.
    But before that he MUST has chosed his game parameters and sent
    it to the server with a Create instruction from the Game group and
    MUST has received a success message from server.

               Client                               Server
Client chose the  |					|
Parameters of the |					|
Game he wants to  |					|
create            |                                     |
                  |     GAME(group)  CREATE(instr)      |
                  | >>------------------------------->> |
                  |                                     | Server check is
                  |                                     | the game can be
                  |                                     | created with the
                  |                                     | client's parame-
                  |                                     | ters.
                  |                                     |
                  |     GAME(group)  CREATE(instr)  OK  |
                  | <<-------------------------------<< |
                  |                                     |
Here the client   |                                     |
Can wait for more |                                     |
users to join his |                                     |
game.             |                                     |
                  |                                     |
Then he can start |                                     |
The game          |                                     |
                  |     GAME(group)  START(instr)       |
                  | >>------------------------------->> |
                  |                                     |
                  |                                     |
                  |                                     | The Server
                  |                                     | inform the
                  |     GAME(group)  START(instr)  OK   | creator and
                  | <<-------------------------------<< | joiner the game
		  |					|  is starting
		  |					|

    This instruction MUST contains a header but SHOULD NOT contain a data.

    4.7.2 Server to Client

    The Servers MUST responds to the client with a header and a data.
    The data MUST contains :

    request_status	1 byte	Set to 0 if the request the client made
    			  	failed. On success is set to different
				than 0.
    The data CAN contains after the request_status:
    details (OPTIONAL)		string	details on why the request
    				failed.

    Events where the Client's request fails:

    The Client didn't successfully create a game
    The Client is not the one that created that game.

5.  GameDetails Group (1)

    The GameDetail group's instructions Type MUST be one of the following:

    PLAYERLOGIN		:	0
    SCORE		:	1
    GETMAP		:	2
    PLAYERLIFE		:	3

5.1  PlayerLogin Instruction (0)

     5.1.1 Client to Server

     When the Client wants to know the username of the player of the game
     he SHOULD send a PlayerLogin instruction that SHOULD NOT contain data.

     5.1.2 Server to Client

     When the Server receive a PlayerLogin Instruction he MUST respond by
     sending a Header and a Data that MUST be empty in case of error.
     Otherwise he MUST send the Users Info in a list.
     A User Info MUST contains:

     nb_player	:	1 byte		The number of the player
     login	:	string		His username

     Events where the Client's request fails:

     The Client is not in a game.

5.2  Score Instruction (1)

     5.2.1 Client to Server

     When a Client wants to know the score of the player of the played game
     he MUST send a Score instruction. The score instruction MUST contain
     a header and SHOULD NOT contains data.

     5.2.0 Server to Client

     When the Server receive a Score instruction by a client playing a game
     he MUST responds to him by sending a Score Instruction header followed
     by a data that contains :

     player_nb		1 byte
     score		2 bytes

     Repeated by the number of player in the game.
     If the Client is not in a game, the Server SHOULD ignore the message.

5.3.  GetMap Instruction (2)

     5.3.1 Client to Server

     When the Client wants the map of the game he joined he SHOULD send
     a Get Instruction from the MAP group. The data SHOULD be empty.

     5.3.2 Server to Client

     When the Server receives a Get Instruction from the Map group he MUST
     send a response.
     If the Client who sent the request for the map have not successfully
     joined a game the Server MUST send a Get instruction from the Game
     group without data. The size in the Header MUST be 0.

// TODO !!!
     Otherwise... i must wait for barbara to come back because i donno
     wat to do...
// todo: reponse barbara needed sur lenum et l'ushort
// pour le client to server.

5.4  PlayerLife Instruction

// TODO

6.  Movement Group (2)

    This group has a new Type: Position.
    Position is a 6 bytes data containing:

    tile position x	:      1 bytes (unsiged char)
    tile position y	:      1 bytes (unsigned char)
    position in tile x	:      1 bytes (unsigned char)
    position in tile y	:      1 bytes (unsigned char)
    direction x		:      1 bytes (char)
    direction y		:      1 bytes (char)

    direction y and direction x MUST be 0, 1 or -1 depending
    on the direction vector.


    A Element going down and foward(right) as below

                1

		|
		|
		|
		|
      -1 _______|_______ 1
		|\
		|  \
		|    \
		|      \
		|       _\|

               -1

    has a position with a direction x = 1
    and a direction y = -1

    0      1      2      3      4      5      6
    +------+------+------+------+------+------+
    |                  position               |
    |-------------|-------------|--------------
    |    tile     | pos in tile |  direction  |
    |-------------|-------------|--------------
    |  x   |  y   |  x   |  y   |  x   |  y   |
    +------+------+------+------+------+------+

//todo: descriptif pour la tile et pos in tile.

    The instruction number of this group MUST be one of the following:

    MOVE	:	0
    UPDATEPLAYER:	1
    UPDATEENEMY :	2
    UPDATEBULLET:	3
    NEWBULLET	:	4

6.1 Move Instruction (0)

    This instruction only exist Client to Server.
    The client MUST send a header and a data containing
    a Position when he wants to change the position or
    direction of his R-Type.

    He MUST send the 8 bytes header followed by the 6 bytes data
    of position (described above)

6.2 UpdatePlayer Instruction (1)

    This instruction only exist Server to Client.
    This instruction MUST be sent by the server when one or more player
    has changed their position. It contains a data composed of the id
    player and the data Position. Repeated by the
    number of client that changed their position or direction.
    The id player MUST be on 1 byte. The position is represented by
    a 6 bytes data (described above).

    For instance in a game played by two players 1 and 2, the Server
    MUST send a header followed by a 14 bytes data as bellow :

    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14
    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+
    |id1|   position player1    |id2|   position player2    |
    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+

6.3 UpdateEnemy Instruction (2)

    This instruction only exist Server to Client.
    This instruction MUST be sent by the server. It contains a data
    composed of the id player and the data Position. Repeated by the
    number of client that changed their position or direction.
    The id player MUST be on 1 byte. The position is represented by
    a 6 bytes data (described above)

    The data of this instruction is the same as the UpdatePlayer
    Instruction, except that instead of sending the Client id,
    the enemy Id is sent.

6.4 UpdateBullet Instruction (3)

    This instruction only exist Server to Client.
    This instruction MUST be sent by the Server to prevent the clients
    the new bullets position.
    The data sent MUST contains:

    typeBullet		2 bytes		//todo: descriptif type bullet
    friend		1 byte		If the bullet is friendly-fire
    			  		or not.
    pos			6 bytes		Represented by the 6 bytes data
    			  		described above.

    //todo: descriptif type of bullet

6.5 New Bullet Instruction (4)

    This instruction only exitst Client to Server.
    When a client launch a bullet, he MUST send to the server a
    New-Bullet Instruction containing the typeBullet on 2 bytes.

    the typeBullet is described above in Section 6.4.

7.  Lobby Group (3)

    This group contains the Chat instruction for the lobby-Room. The
    instruction MUST be

    CHAT	:	0

7.1 Chat Instruction (0)

    7.1.1 Client to Server

    When a Client is in the lobby room waiting for other players to
    join the game / waiting for the game to start he can chat with
    the other waiting client by sending a Chat instruction.
    This instruction data MUST contains a single String that represent
    what he want to say.

    7.1.2 Server to Client

    When the Server receive a Chat instruction he MUST check if the sender
    of this request is in a lobby-room waiting for a game. If not he SHOULD
    send a Chat Instruction containing no data.
    Otherwise he MUST send to all the player in the lobby a Chat instruction
    with a data containing:

    player_name		string		Sender's username
    message		string		Sender's message

8.  Message Exchange

//todo

8.1 TCP

//todo

8.2 UDP

//todo

9. Reference

//todo
