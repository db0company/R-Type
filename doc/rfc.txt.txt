Network Working Group                             R-type-2014-bideau_s
Request for Comments: nnnn                               December 2011
Category: Informational                                  


                  Network Game Protocol (NGP) For R-Type

Status of This Memo

   This document specifies the Protocol for a Network Game R-Type.
   It describe how is set the binary communication between a
   R-Type Client and R-Type Server, using Transmission Control
   Protocol (TCP) and User Datagram Protocol (UDP).
   Distribution of this memo is unlimited.
   This memo provides information for the Internet community. This
   memo does not specify an Internet standard of any kind.
   Distribution of this memo is unlimited.


Copyright Notice

   Copyright (c) R-Type-2014-bideau_s (2011). All rights reserved.

Contact

   To contact the RFC Editor send an email message to:

         "babel2014@googlegroups.com".

















R-type-2014-bideau_s        Informational                        [Page 1]

RFC 133742                  Network Game Protocol           December 2011


Table of Contents

   1. Introduction ....................................................2
   2. Transfert Description ...........................................2
      2.1 TCP .........................................................2
      2.2 UDP .........................................................2
   3. Data Unit Format ................................................2
      3.1 Header ......................................................2
      3.2 Data ........................................................2
   4. Game Group ......................................................2 
      4.1 GetGame .....................................................2
      4.2 GetLvl ......................................................2
      4.3 Create ......................................................2
      4.4 Join ........................................................2
      4.5 Quit ........................................................2
      4.6 EndGame .....................................................2
      4.7 Start .......................................................2
   5. Map Group .......................................................2
      5.1 Get .........................................................2
   6. Movement Group ..................................................2
      6.1 MovePlayer ..................................................2
      6.2 UpdatePlayer ................................................2
      6.3 UpdateEnemy .................................................2
      6.4 UpdateBullet ................................................2
      6.5 NewBullet ...................................................2
   7. Event Group .....................................................2
      7.1 PlayerDead ..................................................2
      7.2 Score .......................................................2
   8. Message Exchange ................................................2
      8.1 TCP .........................................................2
      8.2 UDP .........................................................2
   9. References ......................................................2

1.  Introduction

2.  Transfert Description

3.  Data Unit Format

   The Data Unit Format contains two fields: a 8 bit header that describes
   the total length of the data unit, and the data unit.

3.1.  Header

 0        1        2        3        4        5        6        7        8
 +--------+--------+--------+--------+--------+--------+--------+--------+
 |      magic      |      data       |      group      |   instruction   |
 |      number     |      size       |      type       |       type      |
 +--------+--------+--------+--------+--------+--------+--------+--------+

   Magic Number (2 bytes) : 
   A magic number that worth 97463 to check if the packet is an r-type
   packet. If the magic number is wrong, the packet is ignored.

   Data Size (2 bytes) :
   Size of the data unit.

   Group Type (2 bytes) :
   The type of Group that the packet is.  The content of this section will
   be one of the four following :

   GAMEGROUP    :   0
   MAPGROUP     :   1
   MOVEMENTGROUP:   2
   EVENTGROUP   :   3

   Instruction Type (2 bytes) :
   The type of Instruction from the previous group that the packet is.
   Differs according to group.


3.2.  Data

    Data is an array of bytes.
    Data wil be formatting as the following :
    There is no separator between 2 informations.
    String Type is composed by : 2 bytes for the size and raw text,
    without '\0' in the end.
    For instance if the data contains an id = 42 (2 bytes) and a
    login = "foobar" the data will have a size of 10 and will look like:


    0     1     2     3     4     5     6     7     8     9     10
    +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
    |    id =   |  size =   |              raw text =           |
    |-----------|-----------|-----------------------------------|
    |     42    |     6     | 'f' | 'o' | 'o' | 'b' | 'a' | 'r' |
    +-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

    Because the size of a string type changes, for now on, the packet's
    diagram will no longer represent the data type string. A Data
    containing a string named foo will be represented as below:
    ~ foo ~


4.  Game Group

    The game group contains instruction to create delete and join
    and quit a game. It also send to Client the list of game in
    progress. TCP is used for this group. The instruction Type is one of
    the following :

    GETGAME    :   0
    GETLVL     :   1
    CREATE     :   2
    JOIN       :   3
    QUIT       :   4
    ENDGAME    :   5

4.1 GetGame Instruction (0)

    When the client wants to know the list of game in progress (being
    played but also on hold) he can request the server by sending a
    packet containing a simple header and the GAME group instruction GETGAME.
    The data unit will be empty.

    For this instruction, the header will always look the same:

 0        1        2        3        4        5        6        7        8
 +--------+--------+--------+--------+--------+--------+--------+--------+
 |      magic      |     size =      |     group =     |   instruction = |
 |      number     |        0        |      GAME       |      GETGAME    |
 +--------+--------+--------+--------+--------+--------+--------+--------+

   And because the packet only contain a header (no data unit), the data
   size will always be zero.

   When the server responds to the client, it sends the almost exact header:
   Only the size changes. He also sends a data.

   The data will contains datagrames. A datagame contains the id_game (2 bytes),
   login(string), game_name(string), lvl(string), player_max (1 byte),
   observer(1 byte), and nb_player(1 byte)
   See (Section 3.2. Data) For more information on string type.


    0     1     2    (3 strings X bytes)        N    N+1   N+2   N+3
    +-----+-----+                               +-----+-----+-----+
    |    id     |                               | pla-| obs-| nb  |
    |           |  ~ login ~ game_name ~ lvl ~  | yer | erv-| pla-|
    |   game    |                               | max | er  | yer |
    +-----+-----+                               +-----+-----+-----+

    with N = 2 + X

5.  Map Group

6.  Movement Group

7.  Event Group

8.  Message Exchange

9. References




